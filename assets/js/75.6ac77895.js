(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{924:function(t,e,s){"use strict";s.r(e);var a=s(27),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"_6-servlet对象的生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-servlet对象的生命周期"}},[t._v("#")]),t._v(" 6. Servlet对象的生命周期")]),t._v(" "),s("h3",{attrs:{id:"_6-1-什么是servlet对象的生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-什么是servlet对象的生命周期"}},[t._v("#")]),t._v(" 6.1 什么是Servlet对象的生命周期")]),t._v(" "),s("ul",[s("li",[t._v("servlet对象什么时候被创建？")]),t._v(" "),s("li",[t._v("Servlet对象什么时候被销毁？")]),t._v(" "),s("li",[t._v("Servlet对象创建了几个？")]),t._v(" "),s("li",[t._v("Servlet对象的生命周期表示：一个Servlet对象从出生到最后死亡的整个过程！")])]),t._v(" "),s("h3",{attrs:{id:"_6-2-servlet对象是由谁来维护的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-servlet对象是由谁来维护的"}},[t._v("#")]),t._v(" 6.2 Servlet对象是由谁来维护的？")]),t._v(" "),s("ul",[s("li",[t._v("Servlet对象的创建、对象上方法的调用、对象最终的销毁、JavaWeb程序员是无权干涉的！！")]),t._v(" "),s("li",[t._v("Servlet对象的生命周期是由Tomcat服务器（WEB Server）全权负责！！")]),t._v(" "),s("li",[t._v("Tomcat服务器通常我们又称为：WEB容器。")]),t._v(" "),s("li",[t._v("WEB容器来管理Servlet对象的死活")])]),t._v(" "),s("h3",{attrs:{id:"_6-3-思考-我们自己new的servlet对象受web-容器管理吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-思考-我们自己new的servlet对象受web-容器管理吗"}},[t._v("#")]),t._v(" 6.3 思考：我们自己new的Servlet对象受WEB 容器管理吗？")]),t._v(" "),s("ul",[s("li",[t._v("我们自己new的Servlet对象是不受WEB容器管理的。")]),t._v(" "),s("li",[t._v("WEB容器创建的对象，这些对象都会被放到一个集合中（HashMap）。只有放到这个HashMap集合中的Servlet才能被WEB容器管理，自己new的Servlet对象不会被WEB容器管理（自己new的Servlet对象不在容器当中）")]),t._v(" "),s("li",[t._v("web容器底层应该有一个HashMap这样的集合，在这个集合中存储了Servlet对象和请求路径之间的关系。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"D:/blog/Sanwei/docs/.vuepress/public/img/JavaWeb/image-20221215171045441.png",alt:"image-20221215171045441"}})]),t._v(" "),s("h3",{attrs:{id:"_6-4-研究-服务器在启动的时候servlet对象有没有被创建出来-默认情况下"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-研究-服务器在启动的时候servlet对象有没有被创建出来-默认情况下"}},[t._v("#")]),t._v(" 6.4 研究：服务器在启动的时候Servlet对象有没有被创建出来（默认情况下）?")]),t._v(" "),s("ul",[s("li",[t._v("在Servlet中提供一个无参的构造方法，启动服务器的时候看看构造方法是否被执行。")]),t._v(" "),s("li",[t._v("经过测试得出结论：默认情况下，服务器在启动的时候Servlet对象并不会被实例化。")]),t._v(" "),s("li",[t._v("这个设计是合理的。用户在没有发送请求之前，如果提前创建出来所有Servlet对象，必然是消耗内存的，并且创建出来的Servlet如果一直没有被使用，显然，这个Servlet就没有什么用处！！没必要提前创建！！！")])]),t._v(" "),s("h3",{attrs:{id:"_6-5-怎么让服务器在启动的时候创建对象呢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-5-怎么让服务器在启动的时候创建对象呢"}},[t._v("#")]),t._v(" 6.5 怎么让服务器在启动的时候创建对象呢？")]),t._v(" "),s("ul",[s("li",[t._v("在Servlet标签中添加  "),s("code",[t._v("<load-on-startup></load-on-startup>")]),t._v("子标签，在该子标签中填写整数，越小的整数优先级越高！！")])]),t._v(" "),s("div",{staticClass:"language-xml line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("servlet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("servlet-name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("aservlet"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("servlet-name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("servlet-class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("com.bjpowernode.javaweb.servlet.AServlet"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("servlet-class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("load-on-startup")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("1"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("load-on-startup")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("servlet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("servlet-mapping")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("servlet-name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("aservlet"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("servlet-name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("url-pattern")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("/a"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("url-pattern")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("servlet-mapping")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("h3",{attrs:{id:"_6-6-servlet对象生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-6-servlet对象生命周期"}},[t._v("#")]),t._v(" 6.6 Servlet对象生命周期")]),t._v(" "),s("ul",[s("li",[t._v("默认情况下服务器启动时Servlet对象并没有被实例化")]),t._v(" "),s("li",[t._v("用户发送第一次请求的时候，控制台输出了以下内容：")])]),t._v(" "),s("div",{staticClass:"language-makefile line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-makefile"}},[s("code",[t._v("AServlet**无参数构造方法**执行了\nAServlet's **init** method execute!\nAServlet's **service** method execute!\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("ul",[s("li",[s("p",[t._v("根据以上内容得出结论：")]),t._v(" "),s("ul",[s("li",[t._v("用户在发送第一次请求时Servlet对象被实例化（Servlet的构造方法被执行了，并且执行的是无参构造方法）")]),t._v(" "),s("li",[t._v("Servlet对象被创建之后，Tomcat服务器马上调用init方法。（init方法在执行的时候，Servlet对象已经存在了，被创建出来了）；")]),t._v(" "),s("li",[t._v("用户发送第一次请求的时候，init方法执行之后，Tomcat服务器马上调用Servlet对象的service方法；")]),t._v(" "),s("li",[t._v("用户继续发送第二次请求，控制台输出了一下内容;")])]),t._v(" "),s("div",{staticClass:"language-makefile line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-makefile"}},[s("code",[t._v("AServlet's **service** method execute!\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("ul",[s("li",[t._v("根据以上输出结果得知：\n"),s("ul",[s("li",[t._v("用户在发送第二次、第三次、第四次、···· 请求的时候，Servlet对象并没有新建，还是使用之前创建好的Servlet对象，直接调用该Servlet对象的service方法，这说明\n"),s("ul",[s("li",[t._v("第一：Servlet对象是单例的（注意：Servlet对象是单例的，但是Servlet类并不符合单例模式，我们称之为假单例，之所以单例是因为Servlet对象的创建我们javaweb程序员管不着，这个对象的创建只能是Tomcat说了算，Tomcat只创建了一个，所以导致了单例，但是属于假单例，真单例模式、构造方法时私有的）")]),t._v(" "),s("li",[t._v("第二：无参数构造方法、init方法只在第一次用户发送请求的时候执行，也就是说无参构造方法只执行一次，init方法也只被Tomcat调用一次")]),t._v(" "),s("li",[t._v("第三：只要用户发送一次请求：service方法必然被Tomcat调用一次，发送100次请求，service方法被调用100次。")])])])])])])])]),t._v(" "),s("h3",{attrs:{id:"_6-7-关闭服务器的时候-控制台输出一下内容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-7-关闭服务器的时候-控制台输出一下内容"}},[t._v("#")]),t._v(" 6.7 关闭服务器的时候，控制台输出一下内容：")]),t._v(" "),s("div",{staticClass:"language-makefile line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-makefile"}},[s("code",[t._v("AServlet's **destroy** method execute!\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("通过以上输出内容，可以得出以下结论：")]),t._v(" "),s("ul",[s("li",[t._v("Servlet的destory方法只被Tomcat服务器调用一次。")]),t._v(" "),s("li",[t._v("destory方法实在什么时候被调用的？\n"),s("ul",[s("li",[t._v("在服务器关闭时；")]),t._v(" "),s("li",[t._v("因为服务器关闭的时候要销毁Servlet对象的内存；")]),t._v(" "),s("li",[t._v("服务器在销毁Servlet对象的内存之前，Tomcat服务器会自动调用Servlet对象的destory方法。")])])])]),t._v(" "),s("h3",{attrs:{id:"_6-8-destory方法调用的时候-对象销毁了还是没有销毁呢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-8-destory方法调用的时候-对象销毁了还是没有销毁呢"}},[t._v("#")]),t._v(" 6.8 destory方法调用的时候，对象销毁了还是没有销毁呢？")]),t._v(" "),s("hr"),t._v(" "),s("ul",[s("li",[t._v("destory方法执行的时候被Servlet调用，对象没有销毁，destory方法执行结束之后，Servlet对象的内存才会被Tomcat释放。")])]),t._v(" "),s("h3",{attrs:{id:"_6-9-servlet对象更像人的一生"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-9-servlet对象更像人的一生"}},[t._v("#")]),t._v(" 6.9 Servlet对象更像人的一生：")]),t._v(" "),s("ul",[s("li",[t._v("Servlet的无参构造方法执行：标志着人出生了；")]),t._v(" "),s("li",[t._v("Servlet对象的init方法执行：标志着人正在接受教育；")]),t._v(" "),s("li",[t._v("Servlet对象的service方法执行：标志着人已经开始工作了，开始为人类提供服务了；")]),t._v(" "),s("li",[t._v("Servlet的对象的destory方法执行：标志着临终。")])]),t._v(" "),s("h3",{attrs:{id:"_6-10-关于servlet类中方法的调用次数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-10-关于servlet类中方法的调用次数"}},[t._v("#")]),t._v(" 6.10 关于Servlet类中方法的调用次数")]),t._v(" "),s("ul",[s("li",[t._v("构造方法只执行一次；")]),t._v(" "),s("li",[t._v("init方法只执行一次；")]),t._v(" "),s("li",[t._v("service方法：用户发送一次请求则执行一次，发送n次请求则执行n次；")]),t._v(" "),s("li",[t._v("destory方法只执行一次。")])]),t._v(" "),s("h3",{attrs:{id:"_6-11-当我们servlet类中编写一个有参构造方法-如果没有手动编写无参构造方法会出现什么问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-11-当我们servlet类中编写一个有参构造方法-如果没有手动编写无参构造方法会出现什么问题"}},[t._v("#")]),t._v(" 6.11 当我们Servlet类中编写一个有参构造方法，如果没有手动编写无参构造方法会出现什么问题？")]),t._v(" "),s("ul",[s("li",[t._v("报错了：500-内部服务器错误")]),t._v(" "),s("li",[t._v("注意：500是一个HTTP协议的错误状态码")]),t._v(" "),s("li",[t._v("500一般是因为服务端的Java出现了异常，")]),t._v(" "),s("li",[t._v("如果没有无参构造方法，导致出现500错误，无法实例化Servlet对象；")]),t._v(" "),s("li",[t._v("所以，一定要注意：在Servlet开发中，不建议程序员来定义构造方法，因为定义不当，就会导致无法实例化Servlet对象。")])]),t._v(" "),s("h3",{attrs:{id:"_6-12-servlet的无参构造方法是在对象第一次创建的时候执行-并且只执行一次-init方法也是在对象第一次创建的时候执行-并且只执行一次-那么这个无参构造方法可以替代init方法吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-12-servlet的无参构造方法是在对象第一次创建的时候执行-并且只执行一次-init方法也是在对象第一次创建的时候执行-并且只执行一次-那么这个无参构造方法可以替代init方法吗"}},[t._v("#")]),t._v(" 6.12 Servlet的无参构造方法是在对象第一次创建的时候执行，并且只执行一次，init方法也是在对象第一次创建的时候执行，并且只执行一次，那么这个无参构造方法可以替代init方法吗？")]),t._v(" "),s("ul",[s("li",[t._v("不能！")]),t._v(" "),s("li",[t._v("Servlet规范中有要求，作为Javaweb程序员，编写Servlet类的时候，不建议手动编写构造方法，很容易让无参构造方法消失，这个操作可能导致Servlet对象无法实例化，所以init方法是有存在的必要的；")])]),t._v(" "),s("h3",{attrs:{id:"_6-13-init、service、destory方法中使用最多的是哪个方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-13-init、service、destory方法中使用最多的是哪个方法"}},[t._v("#")]),t._v(" 6.13 init、service、destory方法中使用最多的是哪个方法？")]),t._v(" "),s("ul",[s("li",[t._v("使用最多的是service方法，service方法是一定要实现的，因为service方法是处理请求的核心方法")]),t._v(" "),s("li",[t._v("什么时候使用init方法？\n"),s("ul",[s("li",[t._v("init方法很少用。")]),t._v(" "),s("li",[t._v("通常在init方法中做初始化操作，并且这个初始化操作只执行一次，例如：初始化数据库连接池，初始化线程池。。。")])])]),t._v(" "),s("li",[t._v("什么时候使用destory方法呢？\n"),s("ul",[s("li",[t._v("destory方法很少用；")]),t._v(" "),s("li",[t._v("通常在destory方法中，进行资源关闭，资源保存等。")])])])])])}),[],!1,null,null,null);e.default=r.exports}}]);