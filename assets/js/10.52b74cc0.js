(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{1047:function(s,t,e){"use strict";e.r(t);var _=e(27),v=Object(_.a)({},(function(){var s=this,t=s.$createElement,_=s._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[_("h2",{attrs:{id:"redis持久化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#redis持久化"}},[s._v("#")]),s._v(" Redis持久化")]),s._v(" "),_("p",[s._v("###4.1 RDB（Redis DataBase）")]),s._v(" "),_("blockquote",[_("p",[s._v("在指定的时间间隔，执行数据集的时间点快照。")]),s._v(" "),_("p",[s._v("实现类似照片记录效果的方式，就是把某一时刻的数据和状态以文件的形式写到磁盘上，也就是快照。这样一来即使故障宕机，快照文件也不会丢失，数据的可靠性就得到了保证。这个快照文件就称为RDB文件（"),_("code",[s._v("dump.rdb")]),s._v("），其中，"),_("code",[s._v("RDB")]),s._v("就是"),_("code",[s._v("Redis DataBase")]),s._v("的缩写。")])]),s._v(" "),_("h4",{attrs:{id:"_4-1-1-配置文件"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-1-配置文件"}},[s._v("#")]),s._v(" 4.1.1 配置文件")]),s._v(" "),_("blockquote",[_("p",[_("strong",[s._v("Redis6.0.16以下：")])]),s._v(" "),_("p",[s._v("自动触发：在"),_("code",[s._v("Redis.conf")]),s._v("配置文件中的"),_("code",[s._v("SNAPSHOTTING")]),s._v("下配置"),_("code",[s._v("save")]),s._v("参数，来触发"),_("code",[s._v("Redis")]),s._v("持久化条件，")]),s._v(" "),_("p",[s._v("比如"),_("code",[s._v('“save m n"')]),s._v("：表示"),_("code",[s._v("m")]),s._v("秒内数据集存在"),_("code",[s._v("n")]),s._v("次修改时，自动触发"),_("code",[s._v("dbsave")]),s._v("。")]),s._v(" "),_("p",[_("code",[s._v("save 900 1")]),s._v("：每隔900s（15min），如果超过"),_("code",[s._v("1")]),s._v("个"),_("code",[s._v("key")]),s._v("发送了改变，就写一份新的"),_("code",[s._v("RDB")]),s._v("文件")]),s._v(" "),_("p",[_("code",[s._v("save 300 10")]),s._v("：每隔300s（5min），如果有超过"),_("code",[s._v("10")]),s._v("个"),_("code",[s._v("key")]),s._v("发生了变化，就写一份新的"),_("code",[s._v("RDB")]),s._v("文件")]),s._v(" "),_("p",[_("code",[s._v("save 60 10000")]),s._v("：每隔60s（1min），如果有超过10000个"),_("code",[s._v("key")]),s._v("发生了改变，就写一份新的"),_("code",[s._v("RDB")]),s._v("文件")])]),s._v(" "),_("p",[_("img",{attrs:{src:e(586),alt:"image-20230421151126028"}})]),s._v(" "),_("blockquote",[_("p",[_("strong",[s._v("Redis 6.2以及 Redis-7.0.0：")])])]),s._v(" "),_("p",[_("img",{attrs:{src:e(587),alt:"image-20230421151207479"}})]),s._v(" "),_("h4",{attrs:{id:"_4-1-2-自动触发"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-2-自动触发"}},[s._v("#")]),s._v(" 4.1.2 自动触发")]),s._v(" "),_("p",[_("img",{attrs:{src:e(588),alt:"image-20230421153750821"}})]),s._v(" "),_("h4",{attrs:{id:"_4-1-3-手动触发"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-3-手动触发"}},[s._v("#")]),s._v(" 4.1.3 手动触发")]),s._v(" "),_("p",[_("img",{attrs:{src:e(589),alt:"image-20230421154036254"}})]),s._v(" "),_("p",[s._v("###4.2 AOF（Append only file）")]),s._v(" "),_("blockquote",[_("p",[s._v("以日志的形式来记录每个写操作以日志的形式来记录每个写操作，将Redis执行过的所有写指令记录下来(读操作不记录)，只许追加文件但是不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。")]),s._v(" "),_("p",[s._v("默认情况下，"),_("code",[s._v("redis")]),s._v("是没有开启"),_("code",[s._v("AOF")]),s._v("的。开启"),_("code",[s._v("AOF")]),s._v("功能需要设置配置："),_("code",[s._v("appendonly yes")])])]),s._v(" "),_("h4",{attrs:{id:"_4-2-1-aof持久化工作流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-1-aof持久化工作流程"}},[s._v("#")]),s._v(" 4.2.1 AOF持久化工作流程")]),s._v(" "),_("p",[_("img",{attrs:{src:e(590),alt:"image-20230422151705436"}})]),s._v(" "),_("p",[_("img",{attrs:{src:e(591),alt:"image-20230422151758196"}})]),s._v(" "),_("h4",{attrs:{id:"_4-2-2-三种写回策略"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-2-三种写回策略"}},[s._v("#")]),s._v(" 4.2.2 三种写回策略")]),s._v(" "),_("p",[_("img",{attrs:{src:e(592),alt:"image-20230422152043975"}})]),s._v(" "),_("blockquote",[_("p",[_("code",[s._v("Always")]),s._v("：同步写回，每个写命令执行完立刻同步地将日志写回磁盘。")]),s._v(" "),_("p",[_("code",[s._v("ecerysec")]),s._v("：每秒写回，每个写命令执行完，只是先把日志写到AOF文件的内存缓冲区，每隔1秒把缓冲区中的内容写入磁盘。")]),s._v(" "),_("p",[_("code",[s._v("no")]),s._v("：操作系统控制的写回，每个写命令执行完，只是先把日志写回到AOF文件的内存缓冲区，由操作系统决定何时将缓冲区内容写回磁盘。")])]),s._v(" "),_("p",[_("img",{attrs:{src:e(593),alt:"image-20230422152718539"}})]),s._v(" "),_("h4",{attrs:{id:"_4-2-3-aof配置"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-3-aof配置"}},[s._v("#")]),s._v(" 4.2.3 AOF配置")]),s._v(" "),_("blockquote",[_("p",[s._v("如何开启aof")])]),s._v(" "),_("p",[_("img",{attrs:{src:e(594),alt:"29.开启AOF.jpg"}})]),s._v(" "),_("blockquote",[_("p",[s._v("使用默认写回策略")])]),s._v(" "),_("p",[_("img",{attrs:{src:e(595),alt:"img"}})]),s._v(" "),_("blockquote",[_("p",[s._v("aof文件-保存路径")])]),s._v(" "),_("ul",[_("li",[_("p",[s._v("redis6及以前")]),s._v(" "),_("p",[s._v("AOF保存文件的位置和RDB保存文件的位置一样，都是通过redis.conf配置文件的dir配置")])])]),s._v(" "),_("p",[_("img",{attrs:{src:e(596),alt:"img"}})]),s._v(" "),_("ul",[_("li",[s._v("redis7最新")])]),s._v(" "),_("p",[_("img",{attrs:{src:e(597),alt:"img"}})]),s._v(" "),_("p",[_("strong",[s._v("一句话：")])]),s._v(" "),_("p",[_("img",{attrs:{src:e(598),alt:"img"}})]),s._v(" "),_("blockquote",[_("p",[s._v("aof文件-保存名称")])]),s._v(" "),_("ul",[_("li",[s._v("redis6及以前 ，有且仅有一个")])]),s._v(" "),_("p",[_("img",{attrs:{src:e(599),alt:"img"}})]),s._v(" "),_("ul",[_("li",[s._v("Redis7 Multi Part AOF的设计")])]),s._v(" "),_("p",[s._v("从1个文件到3个文件")]),s._v(" "),_("p",[_("img",{attrs:{src:e(600),alt:"img"}})]),s._v(" "),_("p",[_("strong",[s._v("MP-AOF实现")]),s._v(" "),_("strong",[s._v("方案概述")]),s._v(" 顾名思义，MP-AOF就是将原来的单个AOF文件拆分成多个AOF文件。在MP-AOF中，我们将AOF分为三种类型, 分别为:")]),s._v(" "),_("ul",[_("li",[_("strong",[s._v("BASE: 表示基础AOF")]),s._v("，它一般由子进程通过重写产生，该文件最多只有一个。")]),s._v(" "),_("li",[_("strong",[s._v("INCR:表示增量AOF")]),s._v("，它一般会在AOFRW开始执行时被创建，该文件可能存在多个。")]),s._v(" "),_("li",[_("strong",[s._v("HISTORY")]),s._v(":表示历史AOF，它由BASE和INCR AOF变化而来，每次AOFRW成功完成时，本次AOFRW之前对应的BASE和INCR AOF都将变为HISTORY，HISTORY类型的AOF会被Redis自动删除。")])]),s._v(" "),_("p",[s._v("为了管理这些AOF文件，我们引入了一个manifest (清单)文件来跟踪、管理这些AOF。同时，为了便于AOF备份和拷贝，我们将所有的AOF文件和manifest文件放入一个单独的文件目录中，目录名由appenddirname配置(Redis 7.0新增配置项)决定。")]),s._v(" "),_("p",[s._v("Redis7.0config 中对应的配置项")]),s._v(" "),_("p",[_("img",{attrs:{src:e(601),alt:"img"}})]),s._v(" "),_("blockquote",[_("p",[s._v("正常恢复")])]),s._v(" "),_("ol",[_("li",[s._v("修改默认的appendonly no，改为yes")]),s._v(" "),_("li",[s._v("写操作继续，生成aof文件到指定目录（然后将appendonly文件备份，使用flushdb+shutdown服务器来模拟redis宕机数据丢失，删除生成的新aof文件，将备份文件恢复） "),_("img",{attrs:{src:e(602),alt:"img"}})]),s._v(" "),_("li",[s._v("恢复：重启redis然后重新加载，结果OK，将数据重新写入到了redis")])]),s._v(" "),_("blockquote",[_("p",[s._v("异常恢复")])]),s._v(" "),_("ol",[_("li",[s._v("故意胡乱改动正常的AOF文件，模拟网络闪断文件写入不完整等其他异常情况 "),_("img",{attrs:{src:e(603),alt:"img"}})]),s._v(" "),_("li",[s._v("重启Redis之后就会进行AOF文件的载入 "),_("img",{attrs:{src:e(604),alt:"img"}})]),s._v(" "),_("li",[s._v("异常修复命令：redis-check-aof --fix进行修复 "),_("img",{attrs:{src:e(605),alt:"img"}})]),s._v(" "),_("li",[s._v("启动后OK")])]),s._v(" "),_("blockquote",[_("p",[s._v("优势")]),s._v(" "),_("p",[s._v("更好的保护数据不丢失、性能高、可做紧急恢复")])]),s._v(" "),_("p",[_("img",{attrs:{src:e(606),alt:"img"}})]),s._v(" "),_("blockquote",[_("ul",[_("li",[s._v("使用AOF Redis 更加持久: 您可以有不同的fsync 策略: 根本不fsync、每秒 fsync、每次查询时fsync。使用每秒fsync的默认策略，写入性能仍然很棒。fsync 是使用后台线程执行的，当没有fsync正在进行时，主线程将努力执行写入，因此您只能丢失一秒钟的写入。")]),s._v(" "),_("li",[s._v("AOF 日志是一个仅附加日志，因此不会出现寻道问题，也不会在断电时出现损坏问题。即使由于某种原因(磁盘已满或其他原因) 日志以写一半的命令结尾，redis-check-aof 工具也能够轻松修复它。")]),s._v(" "),_("li",[s._v("当AOF 变得太大时，Redis 能够在后台自动重写AOF。重写是完全安全的，因为当 Redis继续附加到旧文件时，会使用创建当前数据集所需的最少操作集生成一个全新的文件，一旦第二个文件准备就绪，Redis 就会切换两者并开始附加到新的那一个。")]),s._v(" "),_("li",[s._v("AOF以易于理解和解析的格式依次包含所有操作的日志。您甚至可以轻松导出AOF文件。例如，即使您不小心使用孩FLUSHALL命令刷新了所有内容，只要在此期间没有执行日志重写，您仍然可以通过停止服务器、删除最新命令并重新启动 Redis 来保存您的数据集。")])])]),s._v(" "),_("blockquote",[_("p",[s._v("劣势")]),s._v(" "),_("p",[s._v("相同数据集的数据而言AOF文件要远大于RDB文件，恢复速度慢于RDB")]),s._v(" "),_("p",[s._v("AOF运行效率要慢于RDB，每秒同步策略效率较好，不同步效率和RDB相同")])]),s._v(" "),_("p",[_("img",{attrs:{src:e(607),alt:"img"}})]),s._v(" "),_("blockquote",[_("ul",[_("li",[s._v("AOF文件通常比相同数据集的等效 RDB 文件大。")]),s._v(" "),_("li",[s._v("根据确切的 fsync策略，AOF可能比 RDB 慢。一般来说，将fsync 设置为每秒性能仍然非常高，并且在禁用 fsync的情况下，即使在高负载下它也应该与 RDB 一样快。即使在巨大的写入负载的情况下，RDB仍然能够提供关于最大延迟的更多保证。")])])])])}),[],!1,null,null,null);t.default=v.exports},586:function(s,t,e){s.exports=e.p+"assets/img/image-20230421151126028.540fa2b7.png"},587:function(s,t,e){s.exports=e.p+"assets/img/image-20230421151207479.22396158.png"},588:function(s,t,e){s.exports=e.p+"assets/img/image-20230421153750821.b8684dcb.png"},589:function(s,t,e){s.exports=e.p+"assets/img/image-20230421154036254.8586d1ab.png"},590:function(s,t,e){s.exports=e.p+"assets/img/image-20230422151705436.eeaae3bb.png"},591:function(s,t,e){s.exports=e.p+"assets/img/image-20230422151758196.4e571f8b.png"},592:function(s,t,e){s.exports=e.p+"assets/img/image-20230422152043975.5785ef23.png"},593:function(s,t,e){s.exports=e.p+"assets/img/image-20230422152718539.f7ba98c7.png"},594:function(s,t,e){s.exports=e.p+"assets/img/29AOF.ac45dc01.jpg"},595:function(s,t,e){s.exports=e.p+"assets/img/30AOF.e1b6fd32.jpg"},596:function(s,t,e){s.exports=e.p+"assets/img/31AOF.8aabc2ff.jpg"},597:function(s,t,e){s.exports=e.p+"assets/img/32AOF.88c71a36.jpg"},598:function(s,t,e){s.exports=e.p+"assets/img/33Redis.5026b928.jpg"},599:function(s,t,e){s.exports=e.p+"assets/img/34AOF.eeada5d9.jpg"},600:function(s,t,e){s.exports=e.p+"assets/img/35AOF.d6fd8d83.jpg"},601:function(s,t,e){s.exports=e.p+"assets/img/36redis7AOF.087a3787.jpg"},602:function(s,t,e){s.exports=e.p+"assets/img/37aof.4ddf3e66.jpg"},603:function(s,t,e){s.exports=e.p+"assets/img/38aof.ef48795b.jpg"},604:function(s,t,e){s.exports=e.p+"assets/img/39aof.cd900b15.jpg"},605:function(s,t,e){s.exports=e.p+"assets/img/40aof.9316b501.jpg"},606:function(s,t,e){s.exports=e.p+"assets/img/41AOF.d607a425.png"},607:function(s,t,e){s.exports=e.p+"assets/img/42AOF.25e19e1c.png"}}]);