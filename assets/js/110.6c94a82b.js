(window.webpackJsonp=window.webpackJsonp||[]).push([[110],{965:function(v,t,_){"use strict";_.r(t);var a=_(27),i=Object(a.a)({},(function(){var v=this,t=v.$createElement,_=v._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"_1、mybatis概述"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1、mybatis概述"}},[v._v("#")]),v._v(" 1、MyBatis概述")]),v._v(" "),_("h3",{attrs:{id:"_1-1-框架"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-框架"}},[v._v("#")]),v._v(" 1.1 框架")]),v._v(" "),_("ul",[_("li",[v._v("在文献中看到的framework被翻译为框架")]),v._v(" "),_("li",[v._v("Java常用的框架：\n"),_("ul",[_("li",[v._v("SSM三大框架技术：Spring + SpringMVC + MyBatis")]),v._v(" "),_("li",[v._v("SpringBoot")]),v._v(" "),_("li",[v._v("SpringCloud")]),v._v(" "),_("li",[v._v("......")])])]),v._v(" "),_("li",[v._v("框架其实就是对通用的代码进行封装，提前写好了一对接口和类，我们可以在做项目的时候直接引入这些接口和类（引入框架），基于这些现有的接口和类进行开发，可以大大提升开发效率")]),v._v(" "),_("li",[v._v("框架一般都以jar包的形式存在，（jar包中有class文件以及各种配置文件等）")])]),v._v(" "),_("h3",{attrs:{id:"_1-2-三层架构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-三层架构"}},[v._v("#")]),v._v(" 1.2 三层架构")]),v._v(" "),_("ul",[_("li",[v._v("表现层（UI）：直接跟前端打交互（接收前端ajax请求，返回json数据给前端）")]),v._v(" "),_("li",[v._v("业务逻辑层（BBL）：一是处理表现层转发过来的前端请求（也就是具体业务），二是将从持久层获取的数据返回到表现层")]),v._v(" "),_("li",[v._v("数据访问层（DAL）：直接操作数据库完成CRUD，并将获得的数据返回到上一层（业务逻辑层）")]),v._v(" "),_("li",[v._v("Java持久层框架：\n"),_("ul",[_("li",[v._v("MyBatis")]),v._v(" "),_("li",[v._v("Hibernate（实现了JPA规范）")]),v._v(" "),_("li",[v._v("jOOQ")]),v._v(" "),_("li",[v._v("Guzz")]),v._v(" "),_("li",[v._v("Spring Data（实现了JPA规范）")]),v._v(" "),_("li",[v._v("ActiveJDBC")]),v._v(" "),_("li",[v._v("......")])])])]),v._v(" "),_("h3",{attrs:{id:"_1-3-jdbc的不足"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-jdbc的不足"}},[v._v("#")]),v._v(" 1.3 JDBC的不足")]),v._v(" "),_("ul",[_("li",[v._v("SQL语句写死在Java程序里，不灵活，改SQL的话就要改Java代码。违背了开闭原则OCP")]),v._v(" "),_("li",[v._v("给“？“传值是繁琐的，能不能自动化传值？")]),v._v(" "),_("li",[v._v("将结果集封装成Java对象是繁琐的，能不能自动化？")])]),v._v(" "),_("h3",{attrs:{id:"_1-4-了解mybatis"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-了解mybatis"}},[v._v("#")]),v._v(" 1.4 了解MyBatis")]),v._v(" "),_("ul",[_("li",[v._v("MyBatis本质上就是对JDBC的封装，通过MyBatis完成CRUD")]),v._v(" "),_("li",[v._v("MyBatis在三层架构中负责持久层的，属于持久层框架。")]),v._v(" "),_("li",[v._v("MyBatis的发展历史：\n"),_("ul",[_("li",[v._v("MyBatis本是Apache的一个开源项目ibatis，2010年这个项目由Apache foundation迁移到了google code ，并且改名为 MyBatis。2013年11月迁移到GitHub。iBatis一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架，iBatis提供的持久层框架包括SQL Maps和Data Access Objects（DAOs）")])])]),v._v(" "),_("li",[v._v("ORM：对象关系映射\n"),_("ul",[_("li",[v._v("O（Object）：Java虚拟机中的Java对象")]),v._v(" "),_("li",[v._v("R（Relational）：关系型数据库")]),v._v(" "),_("li",[v._v("M（Mapping）：将JVM中的Java对象映射到数据库表中一行记录，或是将数据库表中一行记录映射到JVM中的一个Java对象")])])])]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",{staticStyle:{"text-align":"left"}},[v._v("ORM")]),v._v(" "),_("th",[v._v("DB")])])]),v._v(" "),_("tbody",[_("tr",[_("td",{staticStyle:{"text-align":"left"}},[v._v("类<-----")]),v._v(" "),_("td",[v._v("-----\x3e数据库表")])]),v._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"left"}},[v._v("对象<-----")]),v._v(" "),_("td",[v._v("-----\x3e数据行")])]),v._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"left"}},[v._v("属性<-----")]),v._v(" "),_("td",[v._v("-----\x3e字段")])])])]),v._v(" "),_("ul",[_("li",[_("p",[v._v("MyBatis属于半自动化ORM框架")])]),v._v(" "),_("li",[_("p",[v._v("Hibernate属于全自动化的ORM框架")])]),v._v(" "),_("li",[_("p",[v._v("MyBatis框架特点：")]),v._v(" "),_("ul",[_("li",[v._v("支持定制化SQL、存储过程、基本映射以及高级映射")]),v._v(" "),_("li",[v._v("避免了几乎所有的JDBC代码中手动设置参数以及获取结果集")]),v._v(" "),_("li",[v._v("支持XML开发，也支持注解式开发【为保证sql语句的灵活，所以MyBatis大部分采用XML方式开发】")]),v._v(" "),_("li",[v._v("将接口和Java的POJO映射成数据库中的记录")]),v._v(" "),_("li",[v._v("体积小（两jar包，两XML配置文件）")]),v._v(" "),_("li",[v._v("完全做到sql解耦合")]),v._v(" "),_("li",[v._v("提供了基本映射标签")]),v._v(" "),_("li",[v._v("提供了高级映射标签")]),v._v(" "),_("li",[v._v("提供了XML标签，支持动态SQL的编写")]),v._v(" "),_("li",[v._v(".....")])])])])])}),[],!1,null,null,null);t.default=i.exports}}]);